{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"My Career Map","text":"<p>Welcome to my online space!</p> <p>Hello, I\u2019m Pooja Devan, I\u2019ve spent over six years crafting technical content using some of the best documentation tools, scripting languages, and AI technologies.</p> <p>During my Electronics Engineering days, I realized I might not become the kind of engineer who builds circuits or interprets signals with ease, but I discovered something even more valuable: a deep curiosity about how technology works and a knack for explaining it clearly.</p> <p>As I delved into complex topics, I found myself naturally helping friends understand them too. This blend of technical understanding and my strong communication skills led me to explore a career that bridges both worlds. That\u2019s how I found technical writing. The rest, as they say, is documentation.</p>"},{"location":"#2019-2020","title":"2019 - 2020","text":"<p>I started my career writing content for websites, fact-filled articles, product descriptions, and blog posts. I worked with tools like WordPress, MS Word, and Canva, and began learning how to structure content for digital platforms. During this time, I also started creating technical explainer videos using Camtasia. That was my first taste of teaching through content and I loved it.</p>"},{"location":"#2020-2021","title":"2020 - 2021","text":"<p>At SemaConnect and ZKTeco, I moved into more structured documentation, writing manuals, user guides, and software help modules in HTML, working closely with product and engineering teams. I also collaborated with UX teams and helped shape the voice of the product. Tools like Snagit, Adobe XD, and Figma became part of my everyday toolkit. I was still growing into the title of \"technical writer,\" but the path was getting clearer.</p>"},{"location":"#2022-2024","title":"2022 - 2024","text":"<p>Then came Skan AI, where I joined as the first and only technical writer. There was no documentation system, so I built one from scratch using Document360. I defined the architecture, structured the content, and built workflows that supported an agile development process. I even helped train the company\u2019s chatbot and wrote its responses. This was the job where I really learned what it means to own the documentation function not just write, but advocate, organize, and scale.</p>"},{"location":"#2024-present","title":"2024 - Present","text":"<p>At Pixitmedia, I stepped fully into the world of docs-as-code. I write in Markdown and reStructuredText, generate documentation using Sphinx, and collaborate via Git and Bitbucket, just like the developers. I submit pull requests, review code-adjacent content, and ship docs alongside product releases as part of the CI/CD pipeline. I also work comfortably in a Linux environment and manage docs in sync with Jira, Confluence, and release cycles.</p>"},{"location":"#what-ive-learned-along-the-way","title":"What I've Learned Along the Way","text":"<p>Every company I\u2019ve worked with has used a different tool or workflow Document360, RoboHelp, WordPress, Slite, Sphinx, GitHub Pages but I\u2019ve never let that slow me down. I learn fast, adapt quickly, and bring a structured approach no matter what tool I\u2019m handed. Whether I\u2019m writing for end users, developers, or internal teams, I focus on what really matters: making the content useful, clear, and easy to find.</p> <p>This journey from aspiring journalist to engineer to technical writer, has been unconventional but deeply rewarding. Now, I\u2019m exactly where I want to be: helping teams build better products through better documentation.</p>"},{"location":"Codex/","title":"Material for MkDocs","text":"<p>Material for MkDocs is a powerful tool for building beautiful, interactive documentation websites. It comes packed with features that make your content more engaging, organized, and easy to navigate.</p> <p>Some of the standout features include:</p> <ul> <li>Customizable color themes to match your brand or style</li> <li>Smart code blocks that automatically adjust based on the programming language</li> <li>Content tabs to keep related information neatly grouped</li> <li>Callouts (also known as admonitions) to highlight key points or warnings</li> <li>Built-in support for diagrams that render directly in your documentation</li> </ul>"},{"location":"Codex/#prerequisites","title":"Prerequisites","text":"<p>Before you get started, make sure you have the following tools installed:</p> <ul> <li>Python \u2013 Required to run MkDocs</li> <li>pip \u2013 Python's package manager (comes bundled with Python 3.4 and above)</li> <li>Visual Studio Code (or any code editor of your choice)</li> <li>GitHub Account \u2013 We'll use this to deploy the site using GitHub Pages</li> </ul>"},{"location":"Codex/#initial-setup","title":"Initial Setup","text":"<p>Follow these steps to set up your environment and create your documentation project:</p>"},{"location":"Codex/#1-open-a-terminal","title":"1. Open a Terminal","text":"<p>Navigate to the folder where you want to create your project.</p>"},{"location":"Codex/#2-verify-python-installation","title":"2. Verify Python Installation","text":"<p>Run one of the following commands to check if Python is installed:</p> <pre><code>which python\n</code></pre> <p>or</p> <pre><code>which python3\n</code></pre>"},{"location":"Codex/#3-set-up-a-virtual-environment","title":"3. Set Up a Virtual Environment","text":"<p>Create a virtual environment:</p> <pre><code>python -m venv venv\n</code></pre> <p>Activate the virtual environment:</p> <ul> <li>On macOS/Linux:</li> </ul> <pre><code>source venv/bin/activate\n</code></pre> <ul> <li>On Windows:</li> </ul> <pre><code>.\\venv\\Scripts\\activate\n</code></pre>"},{"location":"Codex/#4-check-pip-version","title":"4. Check pip Version","text":"<p>Ensure <code>pip</code> is available:</p> <pre><code>pip --version\n</code></pre>"},{"location":"Codex/#5-install-mkdocs-with-material-theme","title":"5. Install MkDocs with Material Theme","text":"<p>Install the necessary package:</p> <pre><code>pip install mkdocs-material\n</code></pre>"},{"location":"Codex/#set-up-the-project","title":"Set Up the Project","text":""},{"location":"Codex/#6-open-the-project-in-visual-studio-code","title":"6. Open the Project in Visual Studio Code","text":"<p>From the terminal, launch VS Code in the current directory:</p> <pre><code>code .\n</code></pre> <p>Then open the integrated terminal inside VS Code and reactivate your virtual environment if needed.</p>"},{"location":"Codex/#7-create-a-new-mkdocs-site","title":"7. Create a New MkDocs Site","text":"<p>Initialize a new site in the current folder:</p> <pre><code>mkdocs new .\n</code></pre>"},{"location":"Codex/#8-basic-configuration","title":"8. Basic Configuration","text":"<p>Edit the generated <code>mkdocs.yml</code> file and update it like so:</p> <pre><code>site_name: My MkDocs Material Documentation\nsite_url: https://sitename.example\ntheme:\n  name: material\n</code></pre> <p>\ud83d\udd27 You can change the <code>site_name</code> and <code>site_url</code> to match your project.</p>"},{"location":"Codex/#9-preview-your-site","title":"9. Preview Your Site","text":"<p>To start the local development server:</p> <pre><code>mkdocs serve\n</code></pre> <p>Open your browser and visit: http://localhost:8000</p> <p>You should now see your MkDocs site running with the Material theme!</p>"},{"location":"Codex/#enable-yaml-schema-validation","title":"Enable YAML Schema Validation","text":"<p>To unlock many powerful features in Material for MkDocs, you'll often need to edit the <code>mkdocs.yml</code> file. YAML schema validation makes this process easier by providing helpful tooltips, suggestions, and error highlighting right inside your editor.</p>"},{"location":"Codex/#step-1-install-yaml-extension","title":"Step 1: Install YAML Extension","text":"<p>In Visual Studio Code, install the Red Hat YAML extension:</p> <ol> <li>Go to the Extensions tab on the left sidebar.</li> <li>Search for \"YAML\" by Red Hat.</li> <li>Click Install.</li> </ol>"},{"location":"Codex/#step-2-open-settingsjson","title":"Step 2: Open <code>settings.json</code>","text":"<p>To access your user settings file:</p> <ul> <li>Click the \u2699\ufe0f gear icon in the lower-left corner of VS Code.</li> <li>Then click the \ud83d\udcc4 document icon in the top-right corner of the Settings pane.</li> </ul> <p>This opens your <code>settings.json</code> file for editing.</p>"},{"location":"Codex/#step-3-add-schema-and-custom-tags","title":"Step 3: Add Schema and Custom Tags","text":"<p>At the bottom of your <code>settings.json</code> file, add the following:</p> <pre><code>\"yaml.schemas\": {\n  \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\"\n},\n\"yaml.customTags\": [\n  \"!ENV scalar\",\n  \"!ENV sequence\",\n  \"!relative scalar\",\n  \"tag:yaml.org,2002:python/name:material.extensions.emoji.to_svg\",\n  \"tag:yaml.org,2002:python/name:material.extensions.emoji.twemoji\",\n  \"tag:yaml.org,2002:python/name:pymdownx.superfences.fence_code_format\"\n]\n</code></pre> <p>Once added, you\u2019ll start seeing tooltips when you hover over entries in <code>mkdocs.yml</code>, along with real-time error highlighting to prevent syntax issues.</p>"},{"location":"Codex/#customize-the-color-scheme","title":"Customize the Color Scheme","text":"<p>Now let\u2019s enhance the visual appearance of your documentation using Material\u2019s color palette system.</p>"},{"location":"Codex/#enable-dark-mode","title":"Enable Dark Mode","text":"<p>To start, change the theme to use a dark color scheme. In your <code>mkdocs.yml</code>, add:</p> <pre><code>theme:\n  name: material\n  palette:\n    scheme: slate\n</code></pre>"},{"location":"Codex/#set-a-primary-color","title":"Set a Primary Color","text":"<p>You can also set a primary color, which controls the color of the site banner and links:</p> <pre><code>theme:\n  name: material\n  palette:\n    scheme: slate\n    primary: green  # \ud83d\udfe2\n</code></pre>"},{"location":"Codex/#add-a-lightdark-mode-toggle","title":"Add a Light/Dark Mode Toggle","text":"<p>You can let users switch between light and dark modes with a toggle. Here's how to configure it:</p> <pre><code>theme:\n  name: material\n  palette:\n    # Dark Mode\n    - scheme: slate\n      toggle:\n        icon: material/weather-sunny\n        name: Dark mode\n      primary: green\n      accent: deep purple\n\n    # Light Mode\n    - scheme: default\n      toggle:\n        icon: material/weather-night\n        name: Light mode\n      primary: blue\n      accent: deep orange\n</code></pre> <p>This setup displays a toggle button in the site header that lets users switch themes manually.</p>"},{"location":"Codex/#want-to-do-more","title":"Want to Do More?","text":"<p>Material for MkDocs supports many more customization options, from setting your own color values, to auto-switching themes based on system preferences or even time of day.</p> <p>\ud83d\udd17 For full details, check out the Material for MkDocs color customization guide.</p>"},{"location":"Codex/#publish-your-site-to-github-pages","title":"Publish Your Site to GitHub Pages","text":"<p>Once your MkDocs site is ready, you can publish it online for free using GitHub Pages and GitHub Actions. Follow the steps below to automate the deployment.</p>"},{"location":"Codex/#1-create-the-deployment-workflow","title":"1. Create the Deployment Workflow","text":"<p>In your project folder, create the file: <code>.github/workflows/ci.yml</code></p> <p>Then paste the following workflow configuration:</p> <pre><code>name: ci\n\non:\n  push:\n    branches:\n      - master\n      - main\n\npermissions:\n  contents: write\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Configure Git Credentials\n        run: |\n          git config user.name github-actions[bot]\n          git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n\n      - uses: actions/setup-python@v5\n        with:\n          python-version: 3.x\n\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV\n\n      - uses: actions/cache@v4\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n\n      - run: pip install mkdocs-material\n\n      - run: mkdocs gh-deploy --force\n</code></pre> <p>This GitHub Action will automatically build and deploy your MkDocs site whenever you push to the <code>main</code> or <code>master</code> branch.</p>"},{"location":"Codex/#2-set-up-the-github-repository","title":"2. Set Up the GitHub Repository","text":"<ol> <li> <p>Create a new repository on GitHub.</p> </li> <li> <p>In your project terminal, initialize Git and connect your remote:</p> </li> </ol> <pre><code>git init\ngit remote add origin https://github.com/your-username/your-repo-name.git\n</code></pre> <ol> <li>Add, commit, and push your code to the <code>main</code> branch:</li> </ol> <pre><code>git add .\ngit commit -m \"Initial commit\"\ngit branch -M main\ngit push -u origin main\n</code></pre>"},{"location":"Codex/#3-configure-github-pages","title":"3. Configure GitHub Pages","text":"<ol> <li>Go to your repository on GitHub.</li> <li>Click on Settings \u2192 Pages.</li> <li> <p>Under Source, select:</p> </li> <li> <p>Branch: <code>gh-pages</code></p> </li> <li>Folder: <code>/ (root)</code></li> </ol> <p>GitHub will now serve your site from the <code>gh-pages</code> branch. </p>"},{"location":"Explore/","title":"Explore","text":"<p>Thank you for taking the time to explore my work through MkDocs. </p> <p>If you\u2019d like to see more, here\u2019s a link to a collection showcasing my writing across various formats, including public articles, tutorial videos, UX-focused style guides, product manuals, and more.</p>"},{"location":"gitdc/","title":"Git for Technical Writers","text":""},{"location":"gitdc/#introduction","title":"Introduction","text":"<p>Git is a version control system originally designed for developers, but it has become an essential tool for technical writers, too. Whether you're managing documentation for software projects, collaborating with developers, or maintaining a content repository, understanding Git can greatly enhance your productivity and content quality.</p> <p>In this article, we\u2019ll explore what Git is, why it's useful for technical writers, and how to get started with the basics. All from the perspective of someone who writes, edits, and manages documentation.</p>"},{"location":"gitdc/#what-is-git","title":"What Is Git?","text":"<p>Git is a distributed version control system. It allows multiple people to work on the same files, track changes over time, and merge contributions from different collaborators. Every user has a complete copy of the project, making it easy to work offline and maintain a full history of all changes.</p>"},{"location":"gitdc/#why-should-technical-writers-use-git","title":"Why Should Technical Writers Use Git?","text":"<ul> <li>Version Tracking: Never lose track of changes. Git records every modification.</li> <li>Collaboration: Work alongside developers or other writers without overwriting each other's work.</li> <li>Branching: Experiment with drafts or new documentation in isolated environments.</li> <li>Backup: Because every clone is a full copy, there\u2019s inherent redundancy and protection. </li> </ul>"},{"location":"gitdc/#setting-up-git-quickstart","title":"Setting Up Git - Quickstart","text":"<p>Install Git - Download from git-scm.com and follow the installation guide for your OS.</p> <p>Configure Git - Set your name and email:</p> <p><pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"\n</code></pre> Clone a Repository - If you're working on an existing documentation project:</p> <pre><code>git clone https://github.com/yourorg/docs-repo.git\ncd docs-repo\n</code></pre>"},{"location":"gitdc/#a-typical-workflow-for-writers","title":"A Typical Workflow for Writers","text":"<pre><code>graph TD\n    A[Pull latest changes] --&gt; B[Create a new branch for your updates]\n    --&gt; C[Make changes and commit]--&gt; D[Push your branch to remote]\n    --&gt; E[Open a Pull Request-PR];</code></pre>"},{"location":"gitdc/#step-by-step-explanation","title":"Step-by-Step Explanation","text":"Step Command Explanation Pull Latest Changes <code>git pull origin main</code> Fetches the latest updates from the main branch to ensure your local copy is up to date. Create a New Branch <code>git checkout -b update-installation-guide</code> Creates and switches to a new branch where your updates will be safely isolated. Make Changes (Edit files as needed) Modify or add files (e.g., update <code>install.md</code>) to improve documentation. Stage Changes <code>git add docs/install.md</code> Marks the updated file(s) to be included in the next commit. Commit Changes <code>git commit -m \"Clarified installation steps\"</code> Saves your staged changes with a meaningful message describing what was done. Push Branch to Remote <code>git push origin update-installation-guide</code> Uploads your new branch and commits to the remote repository. Open Pull Request (PR) (Use GitHub, GitLab, or Bitbucket) Opens a request for team review, allowing others to comment, approve, or suggest changes. Review &amp; Merge (Team reviews and merges the PR into <code>main</code>) Final step where changes are approved and merged into the main branch. <p>Whether you're maintaining a user guide, updating API documentation, or managing contributions across teams, Git provides the structure and reliability needed to scale your documentation efforts.</p>"}]}